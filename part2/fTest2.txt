did you find your way back into functional programming had a 9ob as a lecturer and my my of said to give you a light teaching load so you can get your research of course had not been a student so had no idea how to do would sit there in my office with a blank sheet of paper and a sharp pencil and wait for great ideas to nothing an undergraduate would knock at the door and do you have a welcome them in as a distraction from this difficult business of doing one of my a really good called said to you should 9ust get on and do something no matter how humble and the end the first thing that did was wrote a parser generator for a functional language so it was a bit like called it in got published in in and the was very inspired by papers about was in he was in so asked him to be an informal didn’t have an adviser he was my sort of remote would go to see him every few months and we would have a chat over was incredibly helpful to me because did feel a bit uncertain about what to did you decide that functional programming was what you wanted to do research was at while was getting my was a very eccentric professor there called and he was big on computer algebra at the gave a short series of lectures about functional which had never heard in which he showed some functional even built things like circular which didn’t seem even possible given you don’t have any side second thing was papers about combinators and the amazing idea that you could take lambda expressions and translate them into this big mess of and and it would evaluate to the same all of that occurred at the same time that was winning the and giving his talk called the von his talk he introduced his functional programming and cast it in a big is the way to write and moreover not only will it revolutionize programming but we should even build new computers to execute these was a call to already thought functional programming was but here was this extremely famous guy saying not only cool it’s the to were a bunch of people at and a few others who all got excited about functional programming at the same was one of those coincidental all 9ust caught were the big open problems in functional programming when you were getting into programming is a radical and elegant attack on the whole enterprise of writing very different from the this and then do programming have to rewire your brain in 6uite a different a long time it was well understood theoretically—there was lots of stuff about semantics and it had these very deep foundations in in terms of a practical programming medium it seemed like a completely virgin with and with the whole effort at people suddenly started to these languages could be not 9ust and and mathematically cool—but also might actually be able to write interesting programs using was the movement that got involved wanted to talk about how came the late there were a number of separate researchers who were doing stuff with lazy functional was was was and at and his dataflow colleagues at was at and so were maybe a dozen all would meet each other at conferences and we came to realize that we were all building little programming languages and they all basically looked the we should do something very very should 9ust agree a common syntax so that we can run each other’s had and languages for so we thought we’ll 9ust cohere around some syntactic least common wanted a basis for teaching and research 9ust to avoid unnecessary weren’t thinking of as a way to solve research problems at more as a substrate for met and should form a committee and design a we and we then physically met in wasn’t before but it was certainly before the web and collaborative working and physically met on several occasions to design the surprising thing is that it turned into a research did that come things that happened that were 6uite serendipitous and knew it was going to be we knew it was going to have parametric polymorphism like and we knew it would have algebraic data types and pattern was all part of the consensus of what we were starting on the other were entirely had spent some time debating what we were going to do about functions like and not parametrically but they are a bit because they should work on a lot of out of the and his student fully the idea of type still have the email which he it was almost like a little paper to the then were bowled this is how we could deal with all of those awkward that we had a choice could keep thinking of embodying a current as we had we didn’t do we classes may be but they solve a really awkward problem that’s a wart on the face of our beautiful embrace we incorporated type classes and they turned out to be one of big contributions to the reasons like this—monadic is another example—Caskell ended up being significantly more innovative and ambitious that we had originally that was largely was the biggest surprise about putting out had always assumed that the more bleeding edge changes to the type things like typedlevel generalized algebraic data types higher rank and existential data would be picked up and used enthusiastically by students in search of a but not really used much in in fact it turns out that people in companies are using some of these stilldnotdterriblydstable think it’s because people in companies are writing software that they want to still be able to maintain and modify in five years you scale and as your ambition about timescale so maybe you’ll invest more in the static guarantees you get from a type and then you push the type system see people out in industry writing blog posts about catamorphisms and categorical and plenty of stuff that don’t the level of abstraction offered by a sophisticated type system lets you get much more ambitious in terms of the intellectual complexity of what you can deal you were doing all of this what was the relationship of the functional programming work to what other people were interested in at at the always thought of as being a conference that was for people cleverer than so it was 6uite a while before even submitted a paper to when did found a community that was completely aligned with the kind of things that cared right there in the title isn’t of so it cares about being principled and it cares about elegance and economy of to get the 9ob done with as little machinery as feel that most of my research life is about has to be always felt was more of a theory not a theory whereas a compiler not 9ust a compiler always felt slightly out of my class at still is an important problem our community can work on solving in the next five or ten we’re to get the and and and economy of and abstractions that contributors value so if we are to get them actually part of the fabric of the software that holds our digital lives the way to do that is by instilling those values into our and so then they will become the developers of the and of there’s a big inertia to but over time it’ll often when the limestone of imperative programming has worn the granite of functional programming will be revealed 