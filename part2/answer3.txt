 how did you find your way back into functional programming researchs   now i had a fob as a lecturer and my bosss my head of department said to mes e4ell simons inll give you a light teaching load so you can get your research startedse &ut of course i had not been a phd student so i had no idea how to do researchs i would sit there in my office with a blank sheet of paper and a sharp pencil and wait for great ideas to comes 1f courses nothing dids dhen an undergraduate would knock at the door and says esimons do you have a momentse ind welcome them in as a distraction from this difficult business of doing researchs  eventually one of my colleaguess a really good guys called john 4ashbrooks said to mes esimons you should fust get on and do something no matter how humble and simplese in the end the first thing that i did was i wrote a parser generator for a functional language sas2s so it was a bit like %accs i called it s%acc in sas2ss dhat got published in lfcb in software practice and experiences  at the times i was very inspired by david durnerns papers about s* combinatorss i was in 2ondons he was in canterburys so i asked him to be an informal mentors since i didnnt have an adviser he was my sort of remote advisors i would go to see him every few months and we would have a chat over coffees dhat was incredibly helpful to me because i did feel a bit uncertain about what to dos  how did you decide that functional programming was what you wanted to do research ons   dhat was at cambridge while i was getting my diplomas dhere was a very eccentric professor there called arthur norman and he was big on computer algebra at the times he gave a short series of lectures about functional programmings which i had never heard ofs in which he showed some functional programss he even built things like circular listss which didnnt seem even possible given you donnt have any side effectss dhe second thing was david durnerns papers about s* combinators and the amazing idea that you could take lambda expressions and translate them into this big mess of sns and *ns and it would evaluate to the same things  and all of that occurred at the same time that john &ackus was winning the during award and giving his talk called scan programming &e 2iberated from the von neumann stylese in his talk he introduced fps his functional programming languages and cast it in a big pictures he saids edhis is the way to write programss and moreover not only will it revolutionize programming but we should even build new computers to execute these programsse dhis was a call to actions 4e already thought functional programming was cools but here was this extremely famous guy saying eitns not only cool itns the might dhing to dose dhere were a bunch of people at cambridges john hughess dhomas clarkes jon fairbairns myselfs and a few others who all got excited about functional programming at the same times it was one of those coincidental thingss 4e all fust caught fires   4hat were the big open problems in functional programming when you were getting into its   functional programming is a radical and elegant attack on the whole enterprise of writing programss itns very different from the edo this and then do thats programming mentalitys %ou have to rewire your brain in duite a different ways for a long time it was well understood theoretically—there was lots of stuff about semantics and it had these very deep foundations in logics &ut in terms of a practical programming medium it seemed like a completely virgin fields dhen with david durnerns works and with the whole 02 effort at edinburghs people suddenly started to says eactuallys these languages could be not fust elegants and beautifuls and mathematically cool—but also usefuls %ou might actually be able to write interesting programs using themse dhat was the movement that i got involved ins   i wanted to talk about how haskell came abouts   in the late cins there were a number of separate researchers who were doing stuff with lazy functional programmings i was ones john hughes was anothers paul hudak was anothers dhomas johnsson and 2ennart augustsson at }othenburgs arvind and his dataflow colleagues at 0ids joe fasel 2os alamos was anothers minus plasmeifer at nifmegens and so ons dhere were maybe a dozen all togethers  4e would meet each other at conferences and we came to realize that we were all building little programming languages and they all basically looked the sames 4e thoughts e1hs we should do something very modests very humbles 4e should fust agree a common syntax so that we can run each otherns programsse 4e had sas2 and 0irandas david durnerns languages for guidances so we thought wenll fust cohere around some syntactic least common denominators 4e wanted a basis for teaching and research fust to avoid unnecessary diversitys 4e werennt thinking of haskell as a way to solve research problems at alls more as a substrate for researchs  4e met and decideds e4e should form a committee and design a languagese so we dids and we then physically met in persons dhis wasnnt before emails but it was certainly before the web and collaborative working and sodforths 4e physically met on several occasions to design the languages dhe surprising thing is that it turned into a research profects  how did that come abouts  several things that happened that were duite serendipitous and unexpecteds 4e knew it was going to be lazys we knew it was going to have parametric polymorphism like 02 doess and we knew it would have algebraic data types and pattern matchings dhat was all part of the consensus of what we were starting froms dype classess on the other hands were entirely news 4e had spent some time debating what we were going to do about functions like reads shows serializations and edualitys dheynre not parametrically polymorphics but they are a bit polymorphics because they should work on a lot of typess and thens out of the blues phil 4adler and his student steve &lott produceds fully formeds the idea of type classess i still have the email which he sent: it was almost like a little paper to the then committees 4e were bowled over: e1hs this is how we could deal with all of those awkward problemsse at that stages we had a choice makes 4e could keep thinking of haskell embodying a current consensuss as we had beens &ut we didnnt do thats instead we saids edype classes may be news but they solve a really nastys awkward problem thatns a wart on the face of our beautiful languages 2etns embrace themse so we incorporated type classes wholeheartedlys and they turned out to be one of haskellns big contributions to the worlds  for reasons like this—monadic i/1 is another example—haskell ended up being significantly more innovative and ambitious that we had originally intendeds &ut that was largely accidentals   4hat was the biggest surprise about putting haskell out theres   i had always assumed that the more bleeding edge changes to the type systems things like typedlevel functionss generalized algebraic data types n}addsos higher rank polymorphisms and existential data typess would be picked up and used enthusiastically by phd students in search of a topics but not really used much in industrys &ut in fact it turns out that people in companies are using some of these stilldnotdterriblydstable extensionss i think itns because people in companies are writing software that they want to still be able to maintain and modify in five years times as you scale ups and as your ambition about timescale increasess so maybe younll invest more in the static guarantees you get from a type systems and then you push the type system harders %ou see people out in industry writing blog posts about catamorphisms and categorical connectionss and plenty of stuff that i donnt understands somehows the level of abstraction offered by a sophisticated type system lets you get much more ambitious in terms of the intellectual complexity of what you can deal withs   as you were doing all of this works what was the relationship of the functional programming work to what other people were interested in at p1p2 at the times   initially i always thought of p1p2 as being a conference that was for people cleverer than mes so it was duite a while before i even submitted a paper to p1p2s &ut when i did i found a community that was completely aligned with the kind of things that i cared abouts itns right there in the title isnnt its principles of programming 2anguagess so it cares about being principled and it cares about elegance and economy of efforts dry to get the fob done with as little machinery as possibles indeeds i feel that most of my research life is about sayings eit has to be simplerse  i always felt i was more of a theory users not a theory developers whereas inm a compiler developers not fust a compiler users so i always felt slightly out of my class at p1p2s i still dos   4hat is an important problem our community can work on solving in the next five or ten yearss   educations if wenre to get the principless and elegances and modularitys and economy of efforts and abstractions that p1p2 contributors value so highlys if we are to get them actually part of the fabric of the software that holds our digital lives togethers the way to do that is by instilling those values into our undergraduatess and so then they will become the developers of the futures and cd1ns of startupss sos therens a big inertia to overcomes but over time itnll happens as i often says when the limestone of imperative programming has worn aways the granite of functional programming will be revealed underneaths 